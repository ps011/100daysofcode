{"version":3,"sources":["components/card.js","components/appBar.js","components/snackbar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","display","margin","background","color","cursor","bullet","transform","title","fontSize","pos","marginBottom","ComponentCard","props","classes","Card","className","onClick","onCardClicked","CardContent","Typography","gutterBottom","eyebrow","variant","component","subtitle","description","theme","flexGrow","menuButton","marginRight","spacing","MenuAppBar","React","useState","auth","anchorEl","setAnchorEl","open","Boolean","handleClose","AppBar","position","Toolbar","IconButton","edge","aria-label","aria-controls","aria-haspopup","event","currentTarget","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","Alert","elevation","width","marginTop","NotificationSnackbar","reason","Snackbar","show","autoHideDuration","severity","text","App","state","showSnackbar","cardClickHandler","section","setState","setTimeout","style","alignItems","justifyContent","this","Component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46216b1e.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 275,\n        display: 'inline-block',\n        margin: '16px',\n        background: 'grey',\n        color: 'white',\n        cursor: 'pointer'\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nexport default function ComponentCard(props) {\n    const classes = useStyles();\n\n    return (\n        <Card className={classes.root} onClick={props.onCardClicked}>\n            <CardContent>\n                <Typography className={classes.title}  gutterBottom>\n                    {props.eyebrow}\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {props.title}\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n                    {props.subtitle}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                    {props.description}\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport default function MenuAppBar() {\n    const classes = useStyles();\n    const [auth] = React.useState(true);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Admin Panel\n                    </Typography>\n                    {auth && (\n                        <div>\n                            <IconButton\n                                aria-label=\"account of current user\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={handleMenu}\n                                color=\"inherit\"\n                            >\n                                <AccountCircle />\n                            </IconButton>\n                            <Menu\n                                id=\"menu-appbar\"\n                                anchorEl={anchorEl}\n                                anchorOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                }}\n                                keepMounted\n                                transformOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right',\n                                }}\n                                open={open}\n                                onClose={handleClose}\n                            >\n                                <MenuItem onClick={handleClose}>Profile</MenuItem>\n                                <MenuItem onClick={handleClose}>My account</MenuItem>\n                            </Menu>\n                        </div>\n                    )}\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nexport default function NotificationSnackbar(props) {\n    const classes = useStyles();\n    // const [setOpen] = React.useState(false);\n\n    // const handleClick = () => {\n    //     setOpen(true);\n    // };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        return;\n        // setOpen(false);\n    };\n\n    return (\n        <div className={classes.root}>\n\n            <Snackbar open={props.show} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity={props.color}>\n                    {props.text}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}\n","import React, {Component} from 'react';\nimport ComponentCard from './components/card';\nimport AppBar from './components/appBar';\nimport Snackbar from './components/snackbar';\n\nclass App extends Component {\n    state = {\n        showSnackbar: false,\n        text: 'This is snackbar',\n        severity: 'success'\n    };\n  cardClickHandler = (section) => {\n      this.setState({showSnackbar: true, text: `You clicked on ${section}`, severity: 'success'});\n      setTimeout(() => this.setState({showSnackbar: false}), 3000);\n};\n\n  render () {\n    return (\n        <div>\n          <AppBar/>\n          <div  style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n          <ComponentCard\n              eyebrow=\"Wanna update your About ?\"\n              title=\"About\"\n              subtitle=\"Make sure you write something awesome\"\n              description=\"Whatever you write here will be displayed in the About section of your website.\"\n              onCardClicked={() => this.cardClickHandler('about')}/>\n          <ComponentCard\n            eyebrow=\"Wanna update your Blogs List?\"\n            title=\"Blog\"\n            subtitle=\"Writing your thoughts out is the best way to express yourself\"\n            description=\"Whatever you update here will be reflected in the blog section.\"\n            onCardClicked={() => this.cardClickHandler('blog')}/>\n          <ComponentCard\n            eyebrow=\"Wanna update Images?\"\n            title=\"Images\"\n            subtitle=\"Rich graphical content is always eye catchy\"\n            description=\"Update the images and banners on your website.\"\n            onCardClicked={() => this.cardClickHandler('images')}/>\n          </div>\n\n            <Snackbar show={this.state.showSnackbar} color={this.state.severity} text={this.state.text}/>\n        </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}